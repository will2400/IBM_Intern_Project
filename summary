工作小结
在RPO项目中， 我担任的是单元测试的相关工作。刚开始，因为没有之前类似的测试代码可以借鉴，所以我前期的工作是调研和寻找合适的用于node.js的单元测试框架。当时， 我调研了mocha 和mock，对比之后感觉mocha比较简明和容易上手，所以选择了mocha 作为我们的的单元测试框架。关于mocha，我用了其expect断定库去判定每一个test case中实际生产结果和期望之间的关系。此外，为了测试代码的覆盖率，我还使用了istanbul去检验test case用的code coverage。 该工具能与mocha同时在命令行运行，而且能给出直观的code coverage summary。
前期，我主要针对routes folder中的user-service.js进行尝试性单元测试，因为我是第一次接触node.js和其代码的单元测试。我几乎是现学现用去写test cases，期间也遇到了不少问题。比如对单元测试认知的出入，对mocha运行顺序的不了解，以及由于node.js异步执行所带来的一系列问题。尤其是code异步执行与脚本处理数据库带来的问题，由于网上资料也不是很多，所以花了我比较长的时间去解决这个问题。但最终在网上调研和同事的帮助下，解决了这些问题。
之后，我就对routes folder中另一个file（api.js）进行单元性测试，由于api.js相比较user-service.js 稍微复杂一些，function也多很多，加之我对其功能也不是很了解，我一开始花了一点时间去了解各个function的功能，以便于我去写test cases。由于之前写user-service.js的 test cases，写api.js的单元测试顺手了许多。但其中也遇到了一些小问题。比如说，好几个function的期望返回值我并不了解，而导致我不知道怎么样去写正确的判定语句，每次都要测试好多次才能写出比较合理的判定句。 期间，由于数据库出现了一点问题，一定程度上延缓了我写api.js test cases的进程。昨天，我基本完成原有版本code 上api.js 的单元测试cases，但是由于后来更新了最新的code， api.js里增加了一些新的function，由于时间问题，我没法完成，这些需要后续去补完。同时，由于code的更新，但是数据库并没有及时更新，导致原有的一些case跑不通，希望注意一下。
最后，我2个多月的实习期马上结束了，感谢公司提供这次宝贵的实习机会，同时也感谢同事在这段时间对我照顾，我真的学到了很多! Thanks all!
